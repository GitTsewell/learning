package float

import (
	"testing"
)

func TestConvertToBin(t *testing.T) {
	t.Log(ConvertToBin(127))
}

func TestAddBinary(t *testing.T) {
	s := AddBinary("1100110011001100110011001100110011001100110011001101", "1001100110011001100110011001100110011001100110011010")
	t.Log(s)
}

func TestFloat32ToBitString(t *testing.T) {
	t.Log(Float32ToBitString(0.1))
}

func TestBitStringToFloat32(t *testing.T) {
	t.Log(BitStringToFloat32("00111101110011001100110011001101"))
}

func TestFloat64ToBitString(t *testing.T) {
	t.Log(Float64ToBitString(0.2))
}

func TestBitStringToFloat64(t *testing.T) {
	t.Log(BitStringToFloat64("0011111111010101100110011001100110011001100110011001100110011010"))
}

//0 01111111011 1001100110011001100110011001100110011001100110011010
//0 01111111100 1001100110011001100110011001100110011001100110011010

//1.1001100110011001100110011001100110011001100110011010  指数位置小一位 右移一位 得到
//0.1100110011001100110011001100110011001100110011001101
//1.1001100110011001100110011001100110011001100110011010
//10.1011001100110011001100110011001100110011001100110100  右移一位 指数加一
//1.0101100110011001100110011001100110011001100110011010
//01111111101
//0011111111010101100110011001100110011001100110011001100110011010

//00111101110011001100110011001101
//00111101110011001100110011001100
//11001101 11001100 11001100 111101

//fmt.Println(biu.ByteToBinaryString(byte(3))) //00000011
//0 01111011 10011001100110011001101
//0 01111100 10011001100110011001101

// 指数相减  -1  x 尾数右移一位
// 浮点数尾数的隐藏位  默认是1
//1.10011001100110011001101  ---> 0.110011001100110011001101  多了一位  1进0舍  0.11001100110011001100111

//0.11001100110011001100111
//1.10011001100110011001101 相加
//10.01100110011001100110100 右移一位,并且将指数+1  1.00110011001100110011010  尾数 00110011001100110011010  指数 01111101
//0 01111101 00110011001100110011010
//00111110100110011001100110011010

//10011010 10011001 10011001 10011001 10011001 10011001 10111001 00111111
//10011010 10011001 10011001 10011001 10011001 10011001 11001001 00111111

//
