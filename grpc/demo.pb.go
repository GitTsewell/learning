// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetDemoReq struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDemoReq) Reset()         { *m = GetDemoReq{} }
func (m *GetDemoReq) String() string { return proto.CompactTextString(m) }
func (*GetDemoReq) ProtoMessage()    {}
func (*GetDemoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{0}
}

func (m *GetDemoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDemoReq.Unmarshal(m, b)
}
func (m *GetDemoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDemoReq.Marshal(b, m, deterministic)
}
func (m *GetDemoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDemoReq.Merge(m, src)
}
func (m *GetDemoReq) XXX_Size() int {
	return xxx_messageInfo_GetDemoReq.Size(m)
}
func (m *GetDemoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDemoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDemoReq proto.InternalMessageInfo

func (m *GetDemoReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetDemoRsp struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDemoRsp) Reset()         { *m = GetDemoRsp{} }
func (m *GetDemoRsp) String() string { return proto.CompactTextString(m) }
func (*GetDemoRsp) ProtoMessage()    {}
func (*GetDemoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{1}
}

func (m *GetDemoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDemoRsp.Unmarshal(m, b)
}
func (m *GetDemoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDemoRsp.Marshal(b, m, deterministic)
}
func (m *GetDemoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDemoRsp.Merge(m, src)
}
func (m *GetDemoRsp) XXX_Size() int {
	return xxx_messageInfo_GetDemoRsp.Size(m)
}
func (m *GetDemoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDemoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDemoRsp proto.InternalMessageInfo

func (m *GetDemoRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetDemoRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GetDemoReq)(nil), "grpc.GetDemoReq")
	proto.RegisterType((*GetDemoRsp)(nil), "grpc.GetDemoRsp")
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor_ca53982754088a9d) }

var fileDescriptor_ca53982754088a9d = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x49, 0xcd, 0xcd,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2f, 0x2a, 0x48, 0x56, 0x52, 0xe3, 0xe2,
	0x72, 0x4f, 0x2d, 0x71, 0x49, 0xcd, 0xcd, 0x0f, 0x4a, 0x2d, 0x14, 0x92, 0xe0, 0x62, 0xcf, 0x4d,
	0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xac,
	0x10, 0xea, 0x8a, 0x0b, 0x84, 0x84, 0xb8, 0x58, 0x92, 0xf3, 0x53, 0x20, 0x8a, 0x98, 0x83, 0xc0,
	0x6c, 0x64, 0xbd, 0x4c, 0x28, 0x7a, 0x8d, 0xd6, 0x30, 0x72, 0x71, 0x83, 0x74, 0x06, 0xa7, 0x16,
	0x95, 0x65, 0x26, 0xa7, 0x0a, 0xe9, 0x73, 0xb1, 0x43, 0xcd, 0x12, 0x12, 0xd0, 0x03, 0xb9, 0x42,
	0x0f, 0xe1, 0x04, 0x29, 0x34, 0x91, 0xe2, 0x02, 0x25, 0x06, 0x21, 0x63, 0x2e, 0x6e, 0x28, 0x3f,
	0x3c, 0x31, 0xb3, 0x84, 0x48, 0x4d, 0xe6, 0x5c, 0xbc, 0x50, 0x7e, 0x70, 0x49, 0x51, 0x6a, 0x62,
	0x2e, 0x71, 0xda, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0xe1, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xad, 0x43, 0x8e, 0x46, 0x2d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DemoServiceClient is the client API for DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoServiceClient interface {
	GetDemo(ctx context.Context, in *GetDemoReq, opts ...grpc.CallOption) (*GetDemoRsp, error)
	GetDemoWait(ctx context.Context, in *GetDemoReq, opts ...grpc.CallOption) (*GetDemoRsp, error)
	GetDemoStream(ctx context.Context, in *GetDemoReq, opts ...grpc.CallOption) (DemoService_GetDemoStreamClient, error)
}

type demoServiceClient struct {
	cc *grpc.ClientConn
}

func NewDemoServiceClient(cc *grpc.ClientConn) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) GetDemo(ctx context.Context, in *GetDemoReq, opts ...grpc.CallOption) (*GetDemoRsp, error) {
	out := new(GetDemoRsp)
	err := c.cc.Invoke(ctx, "/grpc.DemoService/GetDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) GetDemoWait(ctx context.Context, in *GetDemoReq, opts ...grpc.CallOption) (*GetDemoRsp, error) {
	out := new(GetDemoRsp)
	err := c.cc.Invoke(ctx, "/grpc.DemoService/GetDemoWait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) GetDemoStream(ctx context.Context, in *GetDemoReq, opts ...grpc.CallOption) (DemoService_GetDemoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DemoService_serviceDesc.Streams[0], "/grpc.DemoService/GetDemoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceGetDemoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DemoService_GetDemoStreamClient interface {
	Recv() (*GetDemoRsp, error)
	grpc.ClientStream
}

type demoServiceGetDemoStreamClient struct {
	grpc.ClientStream
}

func (x *demoServiceGetDemoStreamClient) Recv() (*GetDemoRsp, error) {
	m := new(GetDemoRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServiceServer is the server API for DemoService service.
type DemoServiceServer interface {
	GetDemo(context.Context, *GetDemoReq) (*GetDemoRsp, error)
	GetDemoWait(context.Context, *GetDemoReq) (*GetDemoRsp, error)
	GetDemoStream(*GetDemoReq, DemoService_GetDemoStreamServer) error
}

// UnimplementedDemoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDemoServiceServer struct {
}

func (*UnimplementedDemoServiceServer) GetDemo(ctx context.Context, req *GetDemoReq) (*GetDemoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemo not implemented")
}
func (*UnimplementedDemoServiceServer) GetDemoWait(ctx context.Context, req *GetDemoReq) (*GetDemoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemoWait not implemented")
}
func (*UnimplementedDemoServiceServer) GetDemoStream(req *GetDemoReq, srv DemoService_GetDemoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDemoStream not implemented")
}

func RegisterDemoServiceServer(s *grpc.Server, srv DemoServiceServer) {
	s.RegisterService(&_DemoService_serviceDesc, srv)
}

func _DemoService_GetDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).GetDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DemoService/GetDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).GetDemo(ctx, req.(*GetDemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_GetDemoWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).GetDemoWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DemoService/GetDemoWait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).GetDemoWait(ctx, req.(*GetDemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_GetDemoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDemoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServiceServer).GetDemoStream(m, &demoServiceGetDemoStreamServer{stream})
}

type DemoService_GetDemoStreamServer interface {
	Send(*GetDemoRsp) error
	grpc.ServerStream
}

type demoServiceGetDemoStreamServer struct {
	grpc.ServerStream
}

func (x *demoServiceGetDemoStreamServer) Send(m *GetDemoRsp) error {
	return x.ServerStream.SendMsg(m)
}

var _DemoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDemo",
			Handler:    _DemoService_GetDemo_Handler,
		},
		{
			MethodName: "GetDemoWait",
			Handler:    _DemoService_GetDemoWait_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDemoStream",
			Handler:       _DemoService_GetDemoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "demo.proto",
}
